# Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/social_connector
spring.datasource.username=postgres
spring.datasource.password=admin
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Hibernate Properties
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Server Configuration
server.port=8082

# Logging Configuration
logging.level.root=INFO
logging.level.com.whilter.genai=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.file.name=logs/social-connector.log
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# OAuth2 Configuration - Google
spring.security.oauth2.client.registration.google.client-id=21525619121-9egnu431crq71e9rjjlpvnrbur98lal0.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8082/login/oauth2/code/google
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.provider.google.issuer-uri=https://accounts.google.com

# Google Provider Configuration
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs

# OAuth2 Debug Logging
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.web.client.RestTemplate=DEBUG

# OAuth2 Configuration - Facebook
spring.security.oauth2.client.registration.facebook.client-id=28304338515877436
spring.security.oauth2.client.registration.facebook.client-secret=9b84fa5a62580015c13481633327b732
spring.security.oauth2.client.registration.facebook.scope=email,public_profile
spring.security.oauth2.client.registration.facebook.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.facebook.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# OAuth2 Configuration - LinkedIn
spring.security.oauth2.client.registration.linkedin.client-id=77kblbid9qec8e
spring.security.oauth2.client.registration.linkedin.client-secret=WPL_AP1.mS1MrZyay1RvXkXW.T+nJ8A==
spring.security.oauth2.client.registration.linkedin.scope=r_liteprofile,r_emailaddress
spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.linkedin.redirect-uri=http://localhost:8082/oauth2/callback/linkedin
spring.security.oauth2.client.registration.linkedin.provider=linkedin
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
spring.security.oauth2.client.provider.linkedin.user-name-attribute=id

logging.level.org.springframework.security.oauth2=DEBUG

# Temporarily allow circular references
spring.main.allow-circular-references=true
